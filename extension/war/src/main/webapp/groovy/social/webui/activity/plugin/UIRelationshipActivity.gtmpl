<%
/*
<!--

    Copyright (C) 2003-2010 eXo Platform SAS.

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public License
    as published by the Free Software Foundation; either version 3
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, see<http://www.gnu.org/licenses/>.

-->
*/
%>
<%
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.webui.form.UIFormTextAreaInput;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.exoplatform.social.core.relationship.model.Relationship.Type;
  import org.exoplatform.social.core.application.RelationshipPublisher.TitleId;
  import org.exoplatform.social.core.space.model.Space;
  import org.exoplatform.social.webui.Utils;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.apache.commons.lang.StringEscapeUtils;

  def pcontext = Util.getPortalRequestContext();
  def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");
  def activity = uicomponent.getActivity();
  def activityDeletable = uicomponent.isActivityDeletable();
  def activityCommentAndLikable = uicomponent.isActivityCommentAndLikable();
  def streamOwner = activity.getStreamOwner();
  
  def isConnectionRequested = (uicomponent.getTitleId() == TitleId.CONNECTION_REQUESTED);
  def isConnectionConfirmed = (uicomponent.getTitleId() == TitleId.CONNECTION_CONFIRMED);
  def labelConfirm = _ctx.appRes("UIRelationshipActivity.label.Confirm");
  def labelDeny = _ctx.appRes("UIRelationshipActivity.label.Deny");
  def labelCancelRequest = _ctx.appRes("UIRelationshipActivity.label.CancelRequest");
%>

<% if (activity) { //process if not null

  def jsManager = pcontext.getJavascriptManager().require("SHARED/uiForm");

  def labelComment = _ctx.appRes("UIActivity.label.Comment");
  def labelCancel = _ctx.appRes("UIActivity.label.Cancel");
  def labelLike = _ctx.appRes("UIActivity.label.Like");
  def labelUnlike = _ctx.appRes("UIActivity.label.Unlike");
  def labelSource = _ctx.appRes("UIActivity.label.Source");
  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment").replace("'", "\\'");
  def labelShowAllComments = _ctx.appRes("UIActivity.label.Show_All_Comments");
  def labelHideAllComments = _ctx.appRes("UIActivity.label.Hide_All_Comments");
  def labelShowPreviousComments = _ctx.appRes("UIActivity.label.Show_Previous_Comments");
  
  def labelOnePersonLikeThis=_ctx.appRes("UIActivity.label.One_Person_Like_This");
  def labelTwoPersonLikeThis=_ctx.appRes("UIActivity.label.Two_Person_Like_This");
  def labelOneAndOthersLikeThis=_ctx.appRes("UIActivity.label.One_And_Others_Like_This");
  def labelYouLikeThis=_ctx.appRes("UIActivity.label.You_Like_This");
  def labelYouAndOnePersonLikeThis=_ctx.appRes("UIActivity.label.You_And_One_Person_Like_This");
  def labelYouAndOthersLikeThis=_ctx.appRes("UIActivity.label.You_And_Others_Like_This");

  def captionConfirmation=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirmation"));
  def labelToDeleteThisActivity=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Activity"));
  def labelConfirmbutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Confirm_Delete_Activity-Button"));
  def labelClosebutton=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.label.Cancel_Delete_Activity-Button"));
  def labelToDeleteThisComment=StringEscapeUtils.escapeHtml(_ctx.appRes("UIActivity.msg.Are_You_Sure_To_Delete_This_Comment"));

  def likeActivityAction = uicomponent.event("LikeActivity", "true");
  def unlikeActivityAction = uicomponent.event("LikeActivity", "false");

  def commentList = uicomponent.getComments();
  int allCommentSize = uicomponent.getAllCommentSize();
  if (allCommentSize > 0) {
    labelShowAllComments = labelShowAllComments.replace("{0}", allCommentSize + "");
    labelHideAllComments = labelHideAllComments.replace("{0}", allCommentSize + "");

  }
  
  def commentsHidden = allCommentSize-commentList.size();
  def displayedIdentityLikes = uicomponent.getDisplayedIdentityLikes();
  def identityLikesNum = 0;
  def totalLikesNum = uicomponent.getIdentityLikes().length;
  def labelLikes = null;
  def loadLikesAction = uicomponent.event("LoadLikes");
  def hasMore = (totalLikesNum > uicomponent.LIKES_NUM_DEFAULT) && !uicomponent.isAllLoaded();
  if (displayedIdentityLikes != null) {
    identityLikesNum = displayedIdentityLikes.length;
  }
  
  def commentListStatus = uicomponent.getCommentListStatus();
  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();
  def likesDisplayed = uicomponent.isAllLoaded();
  def placeholder = _ctx.appRes("UIActivity.comment.placeholder").replace("'", "\\'");
  //params for init UIActivity javascript object

    def params = """ {
    activityId: '${activity.id}',
    placeholderComment: '${placeholder}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    allCommentSize: '${allCommentSize}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}'
    } """
  
  jsManager.require("SHARED/jquery", "jq")
           .require("SHARED/bts_tooltip").addScripts("jq('*[rel=\"tooltip\"]').tooltip();")
           .require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);");
  
  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);
  def ownerName, ownerUri = "#", ownerAvatar, activityPostedTime, activityPostedTimeInSpace;
  def listPeopleLikeBlockClass = "", listPeopleBGClass = "";

  if (!likesDisplayed) {
    listPeopleLikeBlockClass = "displayNone";
  }

  if (uicomponent.isLiked()) {
    if (totalLikesNum > 2) {
      labelLikes = labelYouAndOthersLikeThis.replace("{0}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 2) {
      def likeId = (displayedIdentityLikes[0] == Utils.getViewerIdentity().getId()) ? displayedIdentityLikes[1] : displayedIdentityLikes[0];
      def id = Utils.getIdentityManager().getIdentity(likeId);
      labelLikes = labelYouAndOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else {
      labelLikes = labelYouLikeThis;
    }
  } else {
    if (totalLikesNum > 2) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOneAndOthersLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName)).replace("{1}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 1) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOnePersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id.profile.fullName));
    } else if (totalLikesNum == 2) {
      def id1 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      def id2 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[1]);
      labelLikes = labelTwoPersonLikeThis.replace("{0}", StringEscapeUtils.escapeHtml(id1.profile.fullName)).replace("{1}", StringEscapeUtils.escapeHtml(id2.profile.fullName));
    }
  }

  if (!labelLikes) {
   //hides diplayPeopleBG
   listPeopleBGClass = "displayNone";
  }

  activityPostedTime = uicomponent.getPostedTimeString(_ctx, activity.postedTime);
  def spaceID;;
  def ownerIdentity = uicomponent.ownerIdentity;
  if (uicomponent.isUserActivity()) {
    ownerUri = LinkProvider.getUserProfileUri(ownerIdentity.getRemoteId());
    ownerAvatar = ownerIdentity.profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(ownerIdentity.profile.fullName);
    if (!ownerAvatar) ownerAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
  } else if(uicomponent.isSpaceActivity()){
    Space space = Utils.getSpaceService().getSpaceByPrettyName(ownerIdentity.remoteId);
    ownerUri = Utils.getSpaceHomeURL(space);
    ownerAvatar = space.avatarUrl;
    ownerName = space.displayName;
    if (!ownerAvatar) ownerAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
  } else {
    ownerUri = ownerIdentity.profile.url;
    ownerAvatar = ownerIdentity.profile.avatarUrl;
    ownerName = StringEscapeUtils.escapeHtml(ownerIdentity.profile.fullName);
  }
  def currentTime = System.currentTimeMillis();
  
  def isSender = uicomponent.isSender();
  def isReceiver = uicomponent.isReceiver();
  def status = uicomponent.getStatus();
  def relationship = uicomponent.getRelationship();
  def isInvited = (relationship != null && uicomponent.getTitleId() == TitleId.CONNECTION_REQUESTED && status == Type.PENDING);

  def spaceSourceURI, spaceName, spaceImageSource;
    if (uicomponent.isUserActivity() && uicomponent.isSpaceStreamOwner() && !uicomponent.isUISpaceActivitiesDisplay()) {
      Space spaceSource = Utils.getSpaceService().getSpaceByPrettyName(streamOwner);
      spaceID = spaceSource.getId();
      if (spaceSource != null) {
        spaceSourceURI = LinkProvider.getSpaceUri(spaceSource.url);
        spaceName = spaceSource.displayName;
        spaceImageSource = spaceSource.getAvatarUrl();
        if (spaceImageSource == null) {
          spaceImageSource = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
        }
      } else {
        spaceSourceURI = LinkProvider.getActivityUriForSpace(streamOwner, streamOwner);
        spaceName = StringEscapeUtils.escapeHtml(Utils.getSpaceIdentity(streamOwner, false).profile.fullName);
        spaceImageSource = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
      }
    }
%>

<div class="activityStream uiDefaultActivity" id="activityContainer${activity.id}">
  <% uiform.begin() %>
  <div class="activityTimeLine pull-left">
    <div class="activityAvatar avatarCircle">
        <a  href="$ownerUri">
          <img alt="$ownerName" src="$ownerAvatar"/>
        </a>
    </div>
    
  </div><!--end activityTimeLine-->
  <div class="boxContainer" id="boxContainer">
    <div id="ContextBox${activity.id}" class="uiBox contentBox">
        <div id="ActivityContextBox${activity.id}">
          <div class="heading">
                <span class="arrowLeft"></span>
                 <% if (activityDeletable) {
                 %>
                    <a href="javascript:void(0)" data-confirm="$labelToDeleteThisActivity" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%=uicomponent.event("DeleteActivity", uicomponent.getId(), "");%>" class="uiIconClose uiIconLightGray controllDelete" id="DeleteActivityButton${activity.id}"></a>
                  <%}%>
				<div class="author">
					<a  href="$ownerUri">$ownerName</a>
					<%  if (uicomponent.isUserActivity() && uicomponent.isSpaceStreamOwner() && !uicomponent.isUISpaceActivitiesDisplay()) {%>
						<a class="space-avatar spaceName" href="$spaceSourceURI" space-data="$spaceID"><span class="uiIconArrowRightMini uiIconLightGray"></span>&nbsp;$spaceName</a>
					<%}%>
				</div>
				<div class="dataInfor">
					<span class="dateTime"><i class="uiIconClock  uiIconLightGray"></i>&nbsp;$activityPostedTime</span>
					<div class=" actionLink hidden-desktop visible-tablet visible-phone">
    					 <a id="Permalink${activity.id}" class="uiIconLink uiIconLightGray" rel="tooltip" data-placement="bottom" title="$viewActivityTip" href="<%=uicomponent.getActivityPermalink(activity.id)%>"></a>
    					 <% if (activityDeletable) {
    					 %>
    						<a href="javascript:void(0)" data-confirm="$labelToDeleteThisActivity" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%=uicomponent.event("DeleteActivity", uicomponent.getId(), "");%>" class="uiIconClose uiIconLightGray controllDelete" id="DeleteActivityButton${activity.id}"></a>
    					  <%}%>
    				</div>
				</div>
            </div><!--end heading-->
            <div class="description">$activity.title</div><!--end description-->
            <div class="actionBar clearfix ">
                 <% def toggleDisplayCommentAction = uicomponent.event('ToggleDisplayCommentForm', null, false);
                                 def commentLink = "";
                              %>                 
                    <ul class="pull-right statusAction">
                        <li>
                            <a class="$commentLink" id="CommentLink${activity.id}" href="javascript:void(0);">
                                <i class="uiIconComment uiIconLightGray"></i>&nbsp;$allCommentSize
                            </a> 
                        </li>
                      <% if (uicomponent.isLiked()) { %>
                        <li>
                            <a onclick="$unlikeActivityAction" rel="tooltip" data-placement="bottom" title="<%=_ctx.appRes("UIActivity.msg.UnlikeActivity"); %>" id="UnLikeLink${activity.id}" href="javascript:void(0);">
                               <i class="uiIconThumbUp uiIconBlue"></i>&nbsp;$totalLikesNum
                            </a> 
                        </li>
                      <% } else { %>
                        <li>
                            <a onclick="$likeActivityAction" rel="tooltip" data-placement="bottom" title="<%=_ctx.appRes("UIActivity.msg.LikeActivity"); %>" id="LikeLink${activity.id}" href="javascript:void(0);">
                              <i class="uiIconThumbUp uiIconLightGray"></i>&nbsp;$totalLikesNum
                            </a>
                        </li>
                      <% }%>         
                  <% if (isInvited) {
                      if (isReceiver) {%>
                        <li> 
                            <a rel="tooltip" data-placement="bottom" title="$labelConfirm" href="javascript:void(0);" onclick="${uicomponent.event("Accept")}"><i class="uiIconValidate uiIconLightGray"></i></a>
                        </li>  
                        <li> 
                            <a rel="tooltip" data-placement="bottom" title="$labelDeny" href="javascript:void(0);" onclick="${uicomponent.event("Refuse")}"><i class="uiIconRemove uiIconLightGray"></i></a>
                        </li>   
                  <%  } else if (isSender) {%>
                        <li>
                            <a rel="tooltip" data-placement="bottom" title="$labelCancelRequest" href="javascript:void(0);" onclick="${uicomponent.event("Refuse")}"><i class="uiIconReply uiIconLightGray"></i></a>
                        </li>
                  <%  }
                     }%>
                               
                    </ul>   
            </div><!--end actionBar-->                  
            <% if (identityLikesNum > 0 || uicomponent.isLiked()) {%>               
            <div class="listLikedBox $listPeopleBGClass">       
                  <div class="listPeopleContent">
                  <% if (!labelLikes) { labelLikes = ""; } %>
                            <p>$labelLikes</p>

                    <% if (identityLikesNum > 0) {%>
                    <div class="listLiked">
                    <%
                    displayedIdentityLikes.each({
                      def id = Utils.getIdentityManager().getIdentity(it);
                      personLikeFullName = StringEscapeUtils.escapeHtml(id.profile.fullName);
                      personLikeProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
                      personLikeAvatarImageSource = id.profile.avatarUrl;
                      if (!personLikeAvatarImageSource) { personLikeAvatarImageSource = LinkProvider.PROFILE_DEFAULT_AVATAR_URL; }
                      %>
                        <a class="avatarXSmall" title="$personLikeFullName" href="$personLikeProfileUri">
                          <img src="$personLikeAvatarImageSource" alt="$personLikeFullName" />
                        </a>
                     <% })%>
                     <% if ( hasMore ) { %>
             <button onclick="$loadLikesAction" class="btn">...</button>
           <% } %>
                    </div>
                    <% }%>
                 </div>             
            </div><!--end list like people--> 
            <%}%>
            <div id="CommentBlockBound${activity.id}" class="commentBox ">    
              <% if (uicomponent.commentListToggleable()) {
              def showAllCommentsAction = uicomponent.event("SetCommentListStatus", "all");
              def hideAllCommentsAction = uicomponent.event("SetCommentListStatus", "none");
              def loadPreviousCommentsAction = uicomponent.event("SetCommentListStatus", "all");
              %>
              <div class="commentListInfo clearfix">
                <div class="pull-right numberComment">$commentsHidden/$allCommentSize</div>
                <% if (commentListStatus.getStatus().equals("latest") || commentListStatus.getStatus().equals("none")) { %>
                  <a onclick="$showAllCommentsAction" href="javascript:void(0);">$labelShowAllComments</a>
                <% } else if (commentListStatus.getStatus().equals("all")) { %>
                      <% if (commentsHidden > 0) { %>
                <a onclick="$loadPreviousCommentsAction" href="javascript:void(0);">$labelShowPreviousComments</a>
              <% } else { %>
                <a onclick="$hideAllCommentsAction" href="javascript:void(0);">$labelHideAllComments</a>
              <% } %>
              <% } %>
              </div>
            <% } %>
            <div class="commentList">
            <%
            def commenterFullName, commenterProfileUri, commentMessage, commentPostedTime, commenterAvatarImgSrc;
            def first = true, commentContentClass;
            def commentCounter = 0;
            commentList.each({
              commentCounter++;
              if (first & !uicomponent.commentListToggleable()) {
                  commentContentClass = "commentContent";
                  first = false;
              } else {
                  commentContentClass = "";
              }

              def id = Utils.getIdentityManager().getIdentity(it.userId);
              commenterFullName = StringEscapeUtils.escapeHtml(id.profile.fullName);
              commenterProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
              commentMessage = it.title;
              commentPostedTime = uicomponent.getPostedTimeString(_ctx, it.postedTime);
              commenterAvatarImgSrc = id.profile.avatarUrl;
              if (!commenterAvatarImgSrc) commenterAvatarImgSrc = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
            %>
            <div id="commentContainer${it.id}">
              <% if(commentCounter == commentList.size()) { %>
              <div id="CommentBlock${activity.id}${commentCounter}" class="commentItem commentItemLast">
              <% } else { %>
                <div id="CommentBlock${it.id}" class="commentItem ">
              <% }  %>            
                <div class="commmentLeft">
                    <a href="$commenterProfileUri" title="$commenterFullName" class="avatarXSmall">
                      <img alt="$commenterFullName" src="$commenterAvatarImgSrc" />         
                    </a>
                </div><!--end commentLeft-->        
                <div class="commentRight">
                    <div class="author">
                        <a href="$commenterProfileUri">$commenterFullName</a>
                        <span class="dateTime">
                            $commentPostedTime
                         </span>
                    </div>
                    <div class="contentComment" id="${activity.id}-${commentCounter}">
                        $commentMessage
                    </div>
                </div><!--end commentRight-->
                <div class="clearfix"></div>
              <%
                if (uicomponent.isCommentDeletable(it.userId)) {
                  String idDeleteComment = "DeleteCommentButton${it.id}";
              %>
                <a href="javascript:void(0)" id="$idDeleteComment" data-confirm="$labelToDeleteThisComment" data-caption="$captionConfirmation" data-close="$labelClosebutton" data-ok="$labelConfirmbutton"  data-delete="<%= uicomponent.event("DeleteComment", uicomponent.id, it.id); %>"  class="uiIconTrash uiIconLightGray controllDelete"></a>
              <% } %>
              </div>
            </div>
            <% }) %>
            </div> <!--end commentlist-->
            <div class="commentList inputContainer" id="InputContainer${activity.id}">
            <%
              def currentCommenterIdentity = Utils.getOwnerIdentity();
              def currentCommenterUri = LinkProvider.getUserProfileUri(currentCommenterIdentity.getRemoteId());
              def currentCommenterAvatar = currentCommenterIdentity.profile.avatarUrl;
              def currentCommenterName = StringEscapeUtils.escapeHtml(currentCommenterIdentity.profile.fullName);
              if (!currentCommenterAvatar) currentCommenterAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
            %>
            <% if (commentList.size() == 0) { %>
              <div class="commentItem noCommentFormBox" id="CommentFormBlock${activity.id}">
            <% } else { %>
              <div class="commentItem commentFormBox" id="CommentFormBlock${activity.id}">
            <% } %>
                    <div class="commmentLeft">
                        <a title="$currentCommenterName" href="$currentCommenterUri" class="avatarXSmall">
                           <img alt="$currentCommenterName" src="$currentCommenterAvatar"/>        
                        </a>
                    </div><!--end commentLeft--> 
                    <div class="commentRight">
                        <div class="commentInputBox ">
                            <div class="commentInput"><% uicomponent.renderChild(UIFormTextAreaInput.class); %></div>
                            <button class="btn pull-left btn-primary" onclick="<%= uicomponent.event("PostComment") %>" id="CommentButton${activity.id}" disabled>$labelComment</button>
                            <button class="btn visible-phone" id="CancelButton${activity.id}">$labelCancel</button>
                        </div>
                    </div><!--end commentRight-->
                    <div class="clearfix"></div>
                </div> <!--end commentItem-->               
              </div><!--end commentlist-->
            </div><!--end commentBox--> 
        </div><!--end #ActivityContextBox${activity.id}-->
    </div> <!--end ContextBox${activity.id}-->  
  </div> <!-- #boxContainer-->    
  <% uiform.end() %>
</div><!--activityStream-->
<% } else { %> <!-- activity deleted -->
<div class="activityStream deleted">$labelActivityHasBeenDeleted</div>
<% }%>
