<%
/*
<!--

  Copyright (C) 2003-2013 eXo Platform SAS.
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

-->
*/

%>
<%
  import org.exoplatform.portal.webui.util.Util;
  import org.exoplatform.webui.form.UIFormTextAreaInput;
  import org.exoplatform.social.core.service.LinkProvider;
  import org.exoplatform.social.core.space.model.Space;
  import org.exoplatform.social.webui.Utils;
  import org.exoplatform.social.core.service.LinkProvider;

  def pcontext = Util.getPortalRequestContext();
  def labelActivityHasBeenDeleted = _ctx.appRes("UIActivity.label.Activity_Has_Been_Deleted");
  def activity = uicomponent.getActivity();
  def activityDeletable = uicomponent.isActivityDeletable();
  def activityCommentAndLikable = uicomponent.isActivityCommentAndLikable();
  def streamOwner = activity.getStreamOwner();
%>

<% if (activity) { //process if not null

  def jsManager = pcontext.getJavascriptManager();

  def labelComment = _ctx.appRes("UIActivity.label.Comment");
  def labelLike = _ctx.appRes("UIActivity.label.Like");
  def labelUnlike = _ctx.appRes("UIActivity.label.Unlike");
  def labelSource = _ctx.appRes("UIActivity.label.Source");
  def inputWriteAComment = _ctx.appRes("UIActivity.input.Add_your_comment");
  def labelShowAllComments = _ctx.appRes("UIActivity.label.Show_All_Comments");
  def labelHideAllComments = _ctx.appRes("UIActivity.label.Hide_All_Comments");
  def labelShowPreviousComments = _ctx.appRes("UIActivity.label.Show_Previous_Comments");
  
  def labelOnePersonLikeThis=_ctx.appRes("UIActivity.label.One_Person_Like_This");
  def labelTwoPersonLikeThis=_ctx.appRes("UIActivity.label.Two_Person_Like_This");
  def labelOneAndOthersLikeThis=_ctx.appRes("UIActivity.label.One_And_Others_Like_This");
  def labelYouLikeThis=_ctx.appRes("UIActivity.label.You_Like_This");
  def labelYouAndOnePersonLikeThis=_ctx.appRes("UIActivity.label.You_And_One_Person_Like_This");
  def labelYouAndOthersLikeThis=_ctx.appRes("UIActivity.label.You_And_Others_Like_This");

  def likeActivityAction = uicomponent.event("LikeActivity", "true");
  def unlikeActivityAction = uicomponent.event("LikeActivity", "false");

  def commentList = uicomponent.getComments();
  def allComments = uicomponent.getAllComments();
  if (allComments) {
    labelShowAllComments = labelShowAllComments.replace("{0}", allComments.size() + "");
    labelHideAllComments = labelHideAllComments.replace("{0}", allComments.size() + "");

  }
  def totalComments = allComments.size();
  def commentsHidden = allComments.size()-commentList.size();
  def displayedIdentityLikes = uicomponent.getDisplayedIdentityLikes();
  def identityLikesNum = 0;
  def totalLikesNum = uicomponent.getIdentityLikes().length;
  def labelLikes = null;
  def loadLikesAction = uicomponent.event("LoadLikes");
  if (displayedIdentityLikes != null) {
    identityLikesNum = displayedIdentityLikes.length;
  }
  def commentListStatus = uicomponent.getCommentListStatus();
  def commentFormDisplayed = uicomponent.isCommentFormDisplayed();
  def likesDisplayed = uicomponent.isAllLoaded();
  //params for init UIActivity javascript object

  def params = """ {
    activityId: '${activity.id}',
    inputWriteAComment: '$inputWriteAComment',
    commentMinCharactersAllowed: '${uicomponent.getCommentMinCharactersAllowed()}',
    commentMaxCharactersAllowed: '${uicomponent.getCommentMaxCharactersAllowed()}',
    commentFormDisplayed: '$commentFormDisplayed',
    allCommentSize: '${allComments.size()}',
    commentFormFocused: '${uicomponent.isCommentFormFocused()}'
  } """
  
  jsManager.require("SHARED/social-ui-activity", "activity").addScripts("activity.onLoad($params);");
  
  //make sures commentFormFocused is set to false to prevent any refresh to focus, only focus after post a comment
  uicomponent.setCommentFormFocused(false);
  def ownerName, ownerUri = "#", ownerAvatar, activityPostedTime, activityPostedTimeInSpace;
  def listPeopleLikeBlockClass = "", listPeopleBGClass = "";

  if (uicomponent.isLiked()) {
    if (totalLikesNum > 2) {
      labelLikes = labelYouAndOthersLikeThis.replace("{0}", totalLikesNum - 1 + "");
    } else if (totalLikesNum == 2) {
      def likeId = (displayedIdentityLikes[0] == Utils.getViewerIdentity().getId()) ? displayedIdentityLikes[1] : displayedIdentityLikes[0];
      def id = Utils.getIdentityManager().getIdentity(likeId);
      labelLikes = labelYouAndOnePersonLikeThis.replace("{0}", id.profile.fullName);
    } else {
      labelLikes = labelYouLikeThis;
    }
  } else {
    if (totalLikesNum > 2) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOneAndOthersLikeThis.replace("{0}", id.profile.fullName).replace("{1}", totalLikesNum + "");
    } else if (totalLikesNum == 1) {
      def id = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      labelLikes = labelOnePersonLikeThis.replace("{0}", id.profile.fullName);
    } else if (totalLikesNum == 2) {
      def id1 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[0]);
      def id2 = Utils.getIdentityManager().getIdentity(displayedIdentityLikes[1]);
      labelLikes = labelTwoPersonLikeThis.replace("{0}", id1.profile.fullName).replace("{1}", id2.profile.fullName);
    }
  }

  activityPostedTime = uicomponent.getPostedTimeString(_ctx, activity.postedTime);

  def ownerIdentity = uicomponent.ownerIdentity;
  def profile = ownerIdentity.profile;
  
  if (uicomponent.isUserActivity()) {
    ownerUri = LinkProvider.getUserProfileUri(ownerIdentity.getRemoteId());
    ownerAvatar = profile.avatarUrl;
    ownerName = profile.fullName;
    if (!ownerAvatar) ownerAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
  } else if(uicomponent.isSpaceActivity()){
    Space space = Utils.getSpaceService().getSpaceByPrettyName(ownerIdentity.remoteId);
    ownerUri = Utils.getSpaceHomeURL(space);
    ownerAvatar = space.avatarUrl;
    ownerName = space.displayName;
    ownerDescription = space.description;
    ownerMembers = space.members;
    if (!ownerAvatar) ownerAvatar = LinkProvider.SPACE_DEFAULT_AVATAR_URL;
  } else {
    ownerUri = profile.url;
    ownerAvatar = profile.avatarUrl;
    ownerName = profile.fullName;
  }
  def currentTime = System.currentTimeMillis();
%>

<div class="UIActivity">
  <% uiform.begin() %>
  <div class="NormalBox clearfix">
    <a class="Avatar"  href="$ownerUri">
      <img  src="$ownerAvatar" alt="$ownerName" />
      <span class="BorderTop"></span>
      <span class="BorderBottom"></span>
    </a>
    <div class="ContentBox" id="ContextBox${activity.id}">
      <div id="ActivityContextBox${activity.id}">
      <h5 class="TitleContent clearfix">
        <a class="Text"  href="$ownerUri">$ownerName</a><br>
        <span class="DateTime">$activityPostedTime</span>
      <% if (activityDeletable) {%>
        <span onclick="<%= uicomponent.event("DeleteActivity", uicomponent.getId(), ""); %>" class="CloseContentBoxNormal" id="DeleteActivityButton${activity.id}"></span>
      <%}%>
      </h5>
      <div class="Content">
        $activity.title
      </div>
      <div class="DefaultActivityIcon">
      <% def toggleDisplayCommentAction = uicomponent.event('ToggleDisplayCommentForm', null, false);
         def commentLink = "";
      %>
     <% if (activityCommentAndLikable) { %>
        <a class="$commentLink"  id="CommentLink${activity.id}" href="javascript:void(0);">
          $labelComment
        </a> 
        <% if ( totalComments > 0 ) { %>
          <span>$totalComments</span>
        <% } %>
        |
      <% if (uicomponent.isLiked()) { %>
        <a onclick="$unlikeActivityAction" id="UnLikeLink${activity.id}" href="javascript:void(0);">
          $labelUnlike
        </a>
      <% } else { %>
        <a onclick="$likeActivityAction" id="LikeLink${activity.id}" href="javascript:void(0);">
          $labelLike
        </a>
      <% }%>
      <% if (totalLikesNum > 0) {%>
      <span style="margin-left: 3px;">$totalLikesNum</span>
      <% }%>
     <% }%>
        </div>
      </div>
    <% if (identityLikesNum > 0 || uicomponent.isLiked()) {%>
      <div class="ListPeopleLikeBG $listPeopleBGClass">
          <div class="ListPeopleContent">
          <% if (!labelLikes) labelLikes = ""; %>
            $labelLikes

            <% if (identityLikesNum > 0) {%>
            <div class="$listPeopleLikeBlockClass">
            <%
            displayedIdentityLikes.each({
              def id = Utils.getIdentityManager().getIdentity(it);
              personLikeFullName = id.profile.fullName;
              personLikeProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
              personLikeAvatarImageSource = id.profile.avatarUrl;
              if (!personLikeAvatarImageSource) personLikeAvatarImageSource = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
              %>
                <a class="AvatarPeopleBG" title="$personLikeFullName" href="$personLikeProfileUri">
                  <img src="$personLikeAvatarImageSource" alt="$personLikeFullName" title="$personLikeFullName" />
                </a>
             <% })%>
               <button onclick="$loadLikesAction" class="btn">...</button>
            </div>
            <% }%>
          </div>
      </div>
    <%}%>
    
   <div id="CommentBlockBound${activity.id}">
    
      <% if (uicomponent.commentListToggleable()) {
      def showAllCommentsAction = uicomponent.event("SetCommentListStatus", "all");
      def hideAllCommentsAction = uicomponent.event("SetCommentListStatus", "none");
      def loadPreviousCommentsAction = uicomponent.event("SetCommentListStatus", "all");
      %>
      <% if (commentListStatus.getStatus().equals("none")) {%>
      <div class="CommentListInfo HideBottomLine">
      <% } else {%>
      <div class="CommentListInfo">
      <% } %>
            <% if (commentListStatus.getStatus().equals("latest") || commentListStatus.getStatus().equals("none")) { %>
              <a onclick="$showAllCommentsAction" href="javascript:void(0);">
                $labelShowAllComments
              </a>
            <% } else if (commentListStatus.getStatus().equals("all")) { %>
              <% if (commentsHidden > 0) { %>
                <a onclick="$loadPreviousCommentsAction" href="javascript:void(0);">
                  $labelShowPreviousComments
                </a>
                <span style="float:right">$commentsHidden/$totalComments</span>
              <% } else { %>
                <a onclick="$hideAllCommentsAction" href="javascript:void(0);">
                  $labelHideAllComments
                </a>
              <% } %>
            <% } %>
      </div>
      <% } %>

    <%
    def commenterFullName, commenterProfileUri, commentMessage, commentPostedTime, commenterAvatarImgSrc;
    def first = true, commentContentClass;
    def commentCounter = 0;
    commentList.each({
      commentCounter++;
      if (first & !uicomponent.commentListToggleable()) {
        commentContentClass = "CommentContent";
        first = false;
      } else {
        commentContentClass = "";
      }

      def id = Utils.getIdentityManager().getIdentity(it.userId);
      commenterFullName = id.profile.fullName;
      commenterProfileUri = LinkProvider.getUserProfileUri(id.getRemoteId());
      commentMessage = it.title;
      commentPostedTime = uicomponent.getPostedTimeString(_ctx, it.postedTime);
      commenterAvatarImgSrc = id.profile.avatarUrl;
      if (!commenterAvatarImgSrc) commenterAvatarImgSrc = LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
    %>
      <% if (commentCounter == commentList.size()) {%>
      <div id="CommentBlock${activity.id}${commentCounter}" class="CommentBox CommentBoxNoneBottomLine clearfix">
      <% } else { %>
      <div id="CommentBlock${activity.id}${commentCounter}" class="CommentBox clearfix">
      <% } %>
        <a href="$commenterProfileUri" title="$commenterFullName" class="AvatarCM">
          <img width="38px" height="36px" title="$commenterFullName" alt="$commenterFullName" src="$commenterAvatarImgSrc" />
          <span class="BorderTopCM"></span>
          <span class="BorderBottomCM"></span>
        </a>
        <div class="ContentBox">
            <h5><a href="$commenterProfileUri">$commenterFullName</a></h5> $commentPostedTime
            <p class="ContentBlock">
              $commentMessage
            </p>
        </div>
      <%
        if (uicomponent.isCommentDeletable(it.userId)) {
      %>
        <span id="DeleteCommentButton${activity.id}${commentCounter}" onclick="<%= uicomponent.event("DeleteComment", uicomponent.id, it.id); %>" class="CloseContentBoxNormal"></span>
      <% } %>
      </div>
    <% }) %>

    <%
      def currentCommenterIdentity = Utils.getOwnerIdentity();
      def currentCommenterUri = LinkProvider.getUserProfileUri(currentCommenterIdentity.getRemoteId());
      def currentCommenterAvatar = currentCommenterIdentity.profile.avatarUrl;
      def currentCommenterName = currentCommenterIdentity.profile.fullName;
      if (!currentCommenterAvatar) currentCommenterAvatar= LinkProvider.PROFILE_DEFAULT_AVATAR_URL;
    %>
    <% if (commentList.size() == 0) { %>
      <div class="CommentBox InputArea CommentFormBoxNone clearfix" id="CommentFormBlock${activity.id}">
    <% } else { %>
      <div class="CommentBox InputArea CommentFormBox clearfix" id="CommentFormBlock${activity.id}">
    <% } %>
        <a class="AvatarCM" title="$currentCommenterName" href="$currentCommenterUri">
          <img title="$currentCommenterName" src="$currentCommenterAvatar" alt="$currentCommenterName" />
          <span class="BorderTopCM"></span>
          <span class="BorderBottomCM"></span>
        </a>
        <div class="CommentInputBox"><% uicomponent.renderChild(UIFormTextAreaInput.class); %></div>
        <input type="button" onclick="<%= uicomponent.event("PostComment") %>" value="$labelComment" class="CommentButton DisplayNone" id="CommentButton${activity.id}" />
      </div>
    </div>
   </div>
  </div>
  <% uiform.end() %>
</div>
<% } else { %> <!-- activity deleted -->
<div class="UIActivity Deleted">$labelActivityHasBeenDeleted</div>
<% }%>